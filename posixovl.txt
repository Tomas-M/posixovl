
Usage
=====
	mount.posixovl [-F] [-S source_dir] /target_dir [-- fuseopts]

	If no source directory is given, the target_dir specifies both source
	and target (mountpoint), yielding an "overmount".

	-F will disable permission and ownership checks that would be
	required in case you have a POSIX mount over VFAT. (For example,
	where /vfat is vfat, and /vfat/xfs is a POSIX-behaving filesystem.)

Supports
========
	chmod, chown, hardlink, mkfifo, mknod, symlink/readlink
	ACLs/xattrs (only in passthrough mode, no emulation)

Notes
=====
	Using posixovl on an already POSIX-behaving filesystem (e.g. XFS)
	incurs some issues, since detecting whether a path is POSIX behaving
	or not is difficult. Hence, the following decision was made:

	* permissions will be set to the default permissions (see below) unless
	  a HCB is found that can override these
	* all lower-level files will be operated on/created with the user who
	  inititated the mount

	If no HCB exists for a file or directory, the default permissions are
	644 and 755, respectively. The owner and group of the inode will be the
	owner/group of the real file.

	Each non-regular, non-directory virtual file will have a zero-size real
	file. (Simplifies handling, and makes it apprarent the object exists
	when using other OS.)

	`df` will show:
	$ df -Tah
	Filesystem    Type    Size  Used Avail Use% Mounted on
	/dev/hda5     vfat    5.9G  2.1G  3.9G  35% /windows/D
	posix-overlay(/windows/D)
	     fuse.posixovl    5.9G  2.1G  3.9G  35% /windows/D

	In general, posixovl does not handle case-insensitivity of the
	underlying filesystem (in case of vfat, for example). If you create a
	file "X0" on vfat, it is usually lowercased to "x0", which may break
	some software, namely X.org. In order to make vfat behave more
	POSIX-like, the following mount options are recommended:

	$ mount -t vfat /dev/hda1 /windows/D -o check=s,shortname=mixed
